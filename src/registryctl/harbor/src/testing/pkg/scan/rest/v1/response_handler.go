// Code generated by mockery v2.12.3. DO NOT EDIT.

package v1

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// responseHandler is an autogenerated mock type for the responseHandler type
type responseHandler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: code, resp
func (_m *responseHandler) Execute(code int, resp *http.Response) ([]byte, error) {
	ret := _m.Called(code, resp)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(int, *http.Response) []byte); ok {
		r0 = rf(code, resp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *http.Response) error); ok {
		r1 = rf(code, resp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newResponseHandlerT interface {
	mock.TestingT
	Cleanup(func())
}

// newResponseHandler creates a new instance of responseHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newResponseHandler(t newResponseHandlerT) *responseHandler {
	mock := &responseHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
