// Code generated by mockery v2.12.3. DO NOT EDIT.

package v1

import (
	v1 "github.com/goharbor/harbor/src/pkg/scan/rest/v1"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetMetadata provides a mock function with given fields:
func (_m *Client) GetMetadata() (*v1.ScannerAdapterMetadata, error) {
	ret := _m.Called()

	var r0 *v1.ScannerAdapterMetadata
	if rf, ok := ret.Get(0).(func() *v1.ScannerAdapterMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ScannerAdapterMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScanReport provides a mock function with given fields: scanRequestID, reportMIMEType
func (_m *Client) GetScanReport(scanRequestID string, reportMIMEType string) (string, error) {
	ret := _m.Called(scanRequestID, reportMIMEType)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(scanRequestID, reportMIMEType)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(scanRequestID, reportMIMEType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitScan provides a mock function with given fields: req
func (_m *Client) SubmitScan(req *v1.ScanRequest) (*v1.ScanResponse, error) {
	ret := _m.Called(req)

	var r0 *v1.ScanResponse
	if rf, ok := ret.Get(0).(func(*v1.ScanRequest) *v1.ScanResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ScanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.ScanRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewClientT interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t NewClientT) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
