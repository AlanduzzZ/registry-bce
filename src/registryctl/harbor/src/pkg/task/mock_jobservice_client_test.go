// Code generated by mockery v2.12.3. DO NOT EDIT.

package task

import (
	job "github.com/goharbor/harbor/src/jobservice/job"
	mock "github.com/stretchr/testify/mock"

	models "github.com/goharbor/harbor/src/common/job/models"
)

// mockJobserviceClient is an autogenerated mock type for the Client type
type mockJobserviceClient struct {
	mock.Mock
}

// GetExecutions provides a mock function with given fields: uuid
func (_m *mockJobserviceClient) GetExecutions(uuid string) ([]job.Stats, error) {
	ret := _m.Called(uuid)

	var r0 []job.Stats
	if rf, ok := ret.Get(0).(func(string) []job.Stats); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.Stats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobLog provides a mock function with given fields: uuid
func (_m *mockJobserviceClient) GetJobLog(uuid string) ([]byte, error) {
	ret := _m.Called(uuid)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostAction provides a mock function with given fields: uuid, action
func (_m *mockJobserviceClient) PostAction(uuid string, action string) error {
	ret := _m.Called(uuid, action)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uuid, action)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitJob provides a mock function with given fields: _a0
func (_m *mockJobserviceClient) SubmitJob(_a0 *models.JobData) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(*models.JobData) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.JobData) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type newMockJobserviceClientT interface {
	mock.TestingT
	Cleanup(func())
}

// newMockJobserviceClient creates a new instance of mockJobserviceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockJobserviceClient(t newMockJobserviceClientT) *mockJobserviceClient {
	mock := &mockJobserviceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
